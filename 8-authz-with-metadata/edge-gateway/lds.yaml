resources:
  - name: public-facing-listener
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8080
    filter_chains:
      - filters:
          - name: envoy.http_connection_manager
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              access_log:
                - name: envoy.file_access_log
                  typed_config:
                    '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                    path: /dev/stdout
                    log_format:
                      json_format:
                        authority: '%REQ(:AUTHORITY)%'
                        bytes_received: '%BYTES_RECEIVED%'
                        bytes_sent: '%BYTES_SENT%'
                        duration: '%DURATION%'
                        method: '%REQ(:METHOD)%'
                        path: '%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%'
                        protocol: '%PROTOCOL%'
                        response_code: '%RESPONSE_CODE%'
                        response_code_details: '%RESPONSE_CODE_DETAILS%'
                        response_flags: '%RESPONSE_FLAGS%'
                        start_time: '%START_TIME%'
                        upstream_host: '%UPSTREAM_HOST%'
                        user_agent: '%REQ(USER-AGENT)%'
                        x_envoy_upstream_service_time: '%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%'
                        x_forwarded_for: '%REQ(X-FORWARDED-FOR)%'
                        x_request_id: '%REQ(X-REQUEST-ID)%'
              http_filters:
                - name: envoy.filters.http.health_check
                  typed_config:
                    '@type': type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
                    headers:
                      name: :path
                      safe_regex_match:
                        google_re2: {}
                        regex: ^/status$
                    pass_through_mode: false
                - name: envoy.filters.http.lua
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                    inline_code: |
                      function envoy_on_request(request_handle)
                        local path = request_handle:headers():get(":path")
                        if path == "/echo/v1/sample-with-auth"
                        or path == "another_one" then
                          request_handle:streamInfo():dynamicMetadata():set("envoy.filters.http.ext_authz", "mykey_flow", true)
                        end

                      end
                - name: envoy.filters.http.ext_authz
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                    grpc_service:
                      envoy_grpc:
                        cluster_name: mykey_cluster
                      timeout: 5s
                    status_on_error:
                      code: 503
                    filter_enabled_metadata:
                      filter: envoy.filters.http.ext_authz
                      path:
                      - key: mykey_flow
                      value:
                        bool_match: true
                      invert: true
                    transport_api_version: V3
                - name: envoy.filters.http.router
              rds:
                config_source:
                  path: /etc/envoy/rds.yaml
                  resource_api_version: V3
                route_config_name: http-route
              stat_prefix: ingress_http
              use_remote_address: true
    '@type': type.googleapis.com/envoy.config.listener.v3.Listener
